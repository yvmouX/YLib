plugins {
    id 'java-library'
    id 'maven-publish'
    id("com.gradleup.shadow") version "9.0.0-beta12"
}

group = 'cn.yvmou'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT"
    implementation("com.github.technicallycoded:FoliaLib:0.4.4")

    // 测试依赖
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testCompileOnly "org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    // 生成 Javadoc 和源码 Jar
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

test {
    useJUnitPlatform()
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveFileName = "YLib-${version}.jar"
    // !! MAKE SURE TO CHANGE THIS TO YOUR PLUGIN'S GROUP & PLUGIN NAME !!
    relocate("com.tcoded.folialib", "cn.yvmou.ylib.lib.folialib")

    // Optional: If you use minimize, make sure you exclude FoliaLib
    // Do not uncomment this if you don't know what you are doing
    // minimize {
    //     exclude dependency("com.github.technicallycoded:FoliaLib:.*")
    // }
    exclude("org/jetbrains/annotations/**")
    exclude("org/intellij/lang/annotations/**")
}

// 配置发布到 Maven 本地仓库
publishing {
    publications {
        mavenJava(MavenPublication) {
            // 发布 shadowJar（包含重定位的库）
            artifact shadowJar

            // 同时发布源码和文档
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'YLib'
                description = 'Minecraft plugin utility library'
                url = 'https://github.com/yvmouX/YLib'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'yvmou'
                        name = 'Yvmou'
                        email = 'yvmou@outlook.com'
                    }
                }
            }
        }
    }

    repositories {
        // 发布到本地 Maven 仓库
        mavenLocal()

        // 可选：发布到私有仓库
        /*
        maven {
            url = layout.buildDirectory.dir("repo")
            // 或远程仓库
            // url = 'https://maven.yourdomain.com/releases'
            credentials {
                username = project.findProperty('mavenUser') ?: ''
                password = project.findProperty('mavenPassword') ?: ''
            }
        }
        */
    }
}

// 构建任务依赖关系
build.dependsOn shadowJar
publishToMavenLocal.dependsOn build